
import React from 'react';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Star, ShoppingCart, Heart, Eye } from 'lucide-react';
import { Product } from '@/types/product';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from 'sonner';

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const navigate = useNavigate();
  const { user } = useAuth();

  const handleBuyNow = () => {
    if (!user) {
      toast.error('Please login to purchase products');
      navigate('/login');
      return;
    }

    // Simulate Razorpay integration
    const options = {
      key: 'rzp_test_1234567890', // This would be your actual Razorpay key
      amount: (product.price - (product.price * product.discount / 100)) * 100, // Amount in paise
      currency: 'INR',
      name: 'B-Power Industries',
      description: `Purchase ${product.name}`,
      image: '/logo.png',
      order_id: `order_${Date.now()}`, // This should be generated by your backend
      handler: function (response: any) {
        toast.success('Payment successful! Order placed.');
        // Here you would typically send the payment details to your backend
        console.log('Payment Response:', response);
        
        // Navigate to buyer dashboard or order confirmation
        navigate('/buyer-dashboard');
      },
      prefill: {
        name: user.user_metadata?.full_name || '',
        email: user.email || '',
        contact: '9999999999' // You might want to collect this from user profile
      },
      notes: {
        product_id: product.id,
        product_name: product.name
      },
      theme: {
        color: '#1e40af'
      }
    };

    // In a real implementation, you would load Razorpay script dynamically
    // const rzp = new window.Razorpay(options);
    // rzp.open();
    
    // For demo purposes, we'll simulate the payment
    toast.success('Razorpay payment initiated (Demo mode)');
    setTimeout(() => {
      toast.success('Payment successful! Order placed.');
      navigate('/buyer-dashboard');
    }, 2000);
  };

  const discountedPrice = product.price - (product.price * product.discount / 100);

  return (
    <Card className="group hover:shadow-lg transition-all duration-300 overflow-hidden">
      <div className="relative overflow-hidden">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
        />
        {product.discount > 0 && (
          <Badge className="absolute top-2 left-2 bg-red-500 hover:bg-red-600">
            {product.discount}% OFF
          </Badge>
        )}
        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
          <Button variant="ghost" size="icon" className="bg-white/90 hover:bg-white">
            <Heart className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      <CardContent className="p-4">
        <div className="flex items-start justify-between mb-2">
          <h3 className="font-semibold text-lg line-clamp-2 flex-1">{product.name}</h3>
          <div className="flex items-center ml-2">
            <Eye className="h-4 w-4 text-gray-400 mr-1" />
            <span className="text-xs text-gray-500">234</span>
          </div>
        </div>
        
        <p className="text-gray-600 text-sm line-clamp-2 mb-3">{product.description}</p>
        
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center">
            <div className="flex items-center">
              {[...Array(5)].map((_, i) => (
                <Star 
                  key={i} 
                  className={`h-4 w-4 ${i < 4 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} 
                />
              ))}
            </div>
            <span className="text-sm text-gray-600 ml-1">(4.2)</span>
          </div>
          <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
            {product.location}
          </span>
        </div>
        
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-2">
            <span className="text-xl font-bold text-green-600">
              ₹{discountedPrice.toLocaleString()}
            </span>
            {product.discount > 0 && (
              <span className="text-sm text-gray-500 line-through">
                ₹{product.price.toLocaleString()}
              </span>
            )}
          </div>
        </div>

        <div className="text-xs text-gray-500 mb-3">
          Sold by: <span className="font-medium text-bpower-blue">TechStore India</span>
        </div>
      </CardContent>
      
      <CardFooter className="p-4 pt-0 space-y-2">
        <Button 
          onClick={handleBuyNow}
          className="w-full bg-bpower-blue hover:bg-bpower-green"
        >
          <ShoppingCart className="h-4 w-4 mr-2" />
          Buy Now
        </Button>
        <Button variant="outline" className="w-full">
          Add to Cart
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ProductCard;
